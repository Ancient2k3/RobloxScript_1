local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = Players.LocalPlayer

if not localPlayer or not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") then
    print("LocalPlayer or their HumanoidRootPart is not available.")
    return
end

local messageIndex = 1  -- Start with the first message

local function getNearestPlayer()
    local nearestPlayer = nil
    local shortestDistance = math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (localPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end
    return nearestPlayer
end

local function sendSequentialMessages()
    local nearestPlayer = getNearestPlayer()
    if not nearestPlayer then
        print("No nearest player found.")
        return
    end

    local messages = {
        "Hello " .. nearestPlayer.Name .. ", I'm " .. localPlayer.Name .. "!",
        "You're cute, " .. nearestPlayer.Name .. "!",
        "It's beautiful, right " .. nearestPlayer.Name .. "?",
        "Hiiii, You're " .. nearestPlayer.Name .. " Ahahaha.. " .. localPlayer.Name .. ".",
        "Don't try to annoy me.... " .. nearestPlayer.Name .. " vs " .. localPlayer.Name .. "!"
    }

    if messageIndex > #messages then
        messageIndex = 1  -- Reset to the first message if at the end
    end

    local args = {
        [1] = messages[messageIndex],
        [2] = "All"
    }
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    messageIndex = messageIndex + 1  -- Move to the next message
end

sendSequentialMessages()
